// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package writer

import (
	"github.com/writerai/writer-client-sdk-go/pkg/models/shared"
	"github.com/writerai/writer-client-sdk-go/pkg/utils"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://enterprise-api.writer.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

type Writer struct {
	// AIContentDetector - Methods related to AI Content Detector
	AIContentDetector *aiContentDetector
	// Billing - Methods related to Billing
	Billing *billing
	// CoWrite - Methods related to CoWrite
	CoWrite *coWrite
	// Completions - Methods related to Completions
	Completions *completions
	// Content - Methods related to Content
	Content *content
	// DownloadTheCustomizedModel - Methods related to Download the customized model
	DownloadTheCustomizedModel *downloadTheCustomizedModel
	// Files - Methods related to Files
	Files *files
	// ModelCustomization - Methods related to Model Customization
	ModelCustomization *modelCustomization
	// Models - Methods related to Model
	Models *models
	// Snippet - Methods related to Snippets
	Snippet *snippet
	// Styleguide - Methods related to Styleguide
	Styleguide *styleguide
	// Terminology - Methods related to Terminology
	Terminology *terminology
	// User - Methods related to User
	User *user

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
	_globals        map[string]map[string]map[string]interface{}
}

type SDKOption func(*Writer)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Writer) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Writer) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Writer) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Writer) {
		sdk._security = &security
	}
}

// WithOrganizationID allows setting the OrganizationID parameter for all supported operations
func WithOrganizationID(organizationID int64) SDKOption {
	return func(sdk *Writer) {
		if _, ok := sdk._globals["parameters"]["pathParam"]; !ok {
			sdk._globals["parameters"]["pathParam"] = map[string]interface{}{}
		}

		sdk._globals["parameters"]["pathParam"]["OrganizationID"] = organizationID
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Writer {
	sdk := &Writer{
		_language:   "go",
		_sdkVersion: "0.8.0",
		_genVersion: "2.34.2",

		_globals: map[string]map[string]map[string]interface{}{
			"parameters": {},
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AIContentDetector = newAIContentDetector(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Billing = newBilling(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.CoWrite = newCoWrite(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Completions = newCompletions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Content = newContent(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.DownloadTheCustomizedModel = newDownloadTheCustomizedModel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Files = newFiles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.ModelCustomization = newModelCustomization(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Models = newModels(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Snippet = newSnippet(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Styleguide = newStyleguide(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.Terminology = newTerminology(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	sdk.User = newUser(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
		sdk._globals,
	)

	return sdk
}
