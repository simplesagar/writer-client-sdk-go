// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/writerai/writer-client-sdk-go/pkg/models/shared"
	"net/http"
)

// FindTermsPartOfSpeechEnum
type FindTermsPartOfSpeechEnum string

const (
	FindTermsPartOfSpeechEnumNoun      FindTermsPartOfSpeechEnum = "noun"
	FindTermsPartOfSpeechEnumVerb      FindTermsPartOfSpeechEnum = "verb"
	FindTermsPartOfSpeechEnumAdverb    FindTermsPartOfSpeechEnum = "adverb"
	FindTermsPartOfSpeechEnumAdjective FindTermsPartOfSpeechEnum = "adjective"
)

func (e *FindTermsPartOfSpeechEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = FindTermsPartOfSpeechEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsPartOfSpeechEnum: %s", s)
	}
}

// FindTermsSortFieldEnum
type FindTermsSortFieldEnum string

const (
	FindTermsSortFieldEnumTerm             FindTermsSortFieldEnum = "term"
	FindTermsSortFieldEnumCreationTime     FindTermsSortFieldEnum = "creationTime"
	FindTermsSortFieldEnumModificationTime FindTermsSortFieldEnum = "modificationTime"
	FindTermsSortFieldEnumType             FindTermsSortFieldEnum = "type"
)

func (e *FindTermsSortFieldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "term":
		fallthrough
	case "creationTime":
		fallthrough
	case "modificationTime":
		fallthrough
	case "type":
		*e = FindTermsSortFieldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsSortFieldEnum: %s", s)
	}
}

// FindTermsSortOrderEnum
type FindTermsSortOrderEnum string

const (
	FindTermsSortOrderEnumAsc  FindTermsSortOrderEnum = "asc"
	FindTermsSortOrderEnumDesc FindTermsSortOrderEnum = "desc"
)

func (e *FindTermsSortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = FindTermsSortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsSortOrderEnum: %s", s)
	}
}

// FindTermsTypeEnum
type FindTermsTypeEnum string

const (
	FindTermsTypeEnumApproved FindTermsTypeEnum = "approved"
	FindTermsTypeEnumBanned   FindTermsTypeEnum = "banned"
	FindTermsTypeEnumPending  FindTermsTypeEnum = "pending"
)

func (e *FindTermsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = FindTermsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsTypeEnum: %s", s)
	}
}

type FindTermsRequest struct {
	Limit          *int64                     `queryParam:"style=form,explode=true,name=limit"`
	Offset         *int64                     `queryParam:"style=form,explode=true,name=offset"`
	OrganizationID *int64                     `pathParam:"style=simple,explode=false,name=organizationId"`
	PartOfSpeech   *FindTermsPartOfSpeechEnum `queryParam:"style=form,explode=true,name=partOfSpeech"`
	SortField      *FindTermsSortFieldEnum    `queryParam:"style=form,explode=true,name=sortField"`
	SortOrder      *FindTermsSortOrderEnum    `queryParam:"style=form,explode=true,name=sortOrder"`
	Tags           []string                   `queryParam:"style=form,explode=true,name=tags"`
	TeamID         int64                      `pathParam:"style=simple,explode=false,name=teamId"`
	Term           *string                    `queryParam:"style=form,explode=true,name=term"`
	Type           *FindTermsTypeEnum         `queryParam:"style=form,explode=true,name=type"`
}

type FindTermsResponse struct {
	ContentType string
	// Bad Request
	FailResponse                    *shared.FailResponse
	Headers                         map[string][]string
	PaginatedResultFullTermWithUser *shared.PaginatedResultFullTermWithUser
	StatusCode                      int
	RawResponse                     *http.Response
}
