// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/writerai/writer-client-sdk-go/pkg/models/shared"
	"net/http"
)

type PartOfSpeech string

const (
	PartOfSpeechNoun      PartOfSpeech = "noun"
	PartOfSpeechVerb      PartOfSpeech = "verb"
	PartOfSpeechAdverb    PartOfSpeech = "adverb"
	PartOfSpeechAdjective PartOfSpeech = "adjective"
)

func (e PartOfSpeech) ToPointer() *PartOfSpeech {
	return &e
}

func (e *PartOfSpeech) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = PartOfSpeech(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartOfSpeech: %v", v)
	}
}

type QueryParamSortField string

const (
	QueryParamSortFieldTerm             QueryParamSortField = "term"
	QueryParamSortFieldCreationTime     QueryParamSortField = "creationTime"
	QueryParamSortFieldModificationTime QueryParamSortField = "modificationTime"
	QueryParamSortFieldType             QueryParamSortField = "type"
)

func (e QueryParamSortField) ToPointer() *QueryParamSortField {
	return &e
}

func (e *QueryParamSortField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "term":
		fallthrough
	case "creationTime":
		fallthrough
	case "modificationTime":
		fallthrough
	case "type":
		*e = QueryParamSortField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortField: %v", v)
	}
}

type QueryParamSortOrder string

const (
	QueryParamSortOrderAsc  QueryParamSortOrder = "asc"
	QueryParamSortOrderDesc QueryParamSortOrder = "desc"
)

func (e QueryParamSortOrder) ToPointer() *QueryParamSortOrder {
	return &e
}

func (e *QueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortOrder: %v", v)
	}
}

type Type string

const (
	TypeApproved Type = "approved"
	TypeBanned   Type = "banned"
	TypePending  Type = "pending"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type FindTermsRequest struct {
	Limit          *int64               `queryParam:"style=form,explode=true,name=limit"`
	Offset         *int64               `queryParam:"style=form,explode=true,name=offset"`
	OrganizationID *int64               `pathParam:"style=simple,explode=false,name=organizationId"`
	PartOfSpeech   *PartOfSpeech        `queryParam:"style=form,explode=true,name=partOfSpeech"`
	SortField      *QueryParamSortField `queryParam:"style=form,explode=true,name=sortField"`
	SortOrder      *QueryParamSortOrder `queryParam:"style=form,explode=true,name=sortOrder"`
	Tags           []string             `queryParam:"style=form,explode=true,name=tags"`
	TeamID         int64                `pathParam:"style=simple,explode=false,name=teamId"`
	Term           *string              `queryParam:"style=form,explode=true,name=term"`
	Type           *Type                `queryParam:"style=form,explode=true,name=type"`
}

func (o *FindTermsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *FindTermsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *FindTermsRequest) GetOrganizationID() *int64 {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *FindTermsRequest) GetPartOfSpeech() *PartOfSpeech {
	if o == nil {
		return nil
	}
	return o.PartOfSpeech
}

func (o *FindTermsRequest) GetSortField() *QueryParamSortField {
	if o == nil {
		return nil
	}
	return o.SortField
}

func (o *FindTermsRequest) GetSortOrder() *QueryParamSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *FindTermsRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *FindTermsRequest) GetTeamID() int64 {
	if o == nil {
		return 0
	}
	return o.TeamID
}

func (o *FindTermsRequest) GetTerm() *string {
	if o == nil {
		return nil
	}
	return o.Term
}

func (o *FindTermsRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type FindTermsResponse struct {
	// HTTP response content type for this operation
	ContentType                     string
	Headers                         map[string][]string
	PaginatedResultFullTermWithUser *shared.PaginatedResultFullTermWithUser
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *FindTermsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FindTermsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *FindTermsResponse) GetPaginatedResultFullTermWithUser() *shared.PaginatedResultFullTermWithUser {
	if o == nil {
		return nil
	}
	return o.PaginatedResultFullTermWithUser
}

func (o *FindTermsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FindTermsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
