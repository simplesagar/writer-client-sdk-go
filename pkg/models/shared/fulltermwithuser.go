// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type FullTermWithUserPos string

const (
	FullTermWithUserPosNoun      FullTermWithUserPos = "noun"
	FullTermWithUserPosVerb      FullTermWithUserPos = "verb"
	FullTermWithUserPosAdverb    FullTermWithUserPos = "adverb"
	FullTermWithUserPosAdjective FullTermWithUserPos = "adjective"
)

func (e FullTermWithUserPos) ToPointer() *FullTermWithUserPos {
	return &e
}

func (e *FullTermWithUserPos) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = FullTermWithUserPos(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FullTermWithUserPos: %v", v)
	}
}

type FullTermWithUserType string

const (
	FullTermWithUserTypeApproved FullTermWithUserType = "approved"
	FullTermWithUserTypeBanned   FullTermWithUserType = "banned"
	FullTermWithUserTypePending  FullTermWithUserType = "pending"
)

func (e FullTermWithUserType) ToPointer() *FullTermWithUserType {
	return &e
}

func (e *FullTermWithUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = FullTermWithUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FullTermWithUserType: %v", v)
	}
}

type FullTermWithUser struct {
	ApprovedTermExtension *ApprovedTermExtension `json:"approvedTermExtension,omitempty"`
	BacklinkedTerms       []FullLinkedTerm       `json:"backlinkedTerms,omitempty"`
	CaseSensitive         bool                   `json:"caseSensitive"`
	CreatedUser           TerminologyUser        `json:"createdUser"`
	CreationTime          time.Time              `json:"creationTime"`
	Description           *string                `json:"description,omitempty"`
	Examples              []TermExample          `json:"examples,omitempty"`
	Highlight             bool                   `json:"highlight"`
	ID                    int64                  `json:"id"`
	LinkedTerms           []FullLinkedTerm       `json:"linkedTerms,omitempty"`
	Mistakes              []TermMistake          `json:"mistakes,omitempty"`
	ModificationTime      time.Time              `json:"modificationTime"`
	ModifiedUser          TerminologyUser        `json:"modifiedUser"`
	Pos                   *FullTermWithUserPos   `json:"pos,omitempty"`
	Tags                  []TermTagResponse      `json:"tags,omitempty"`
	Term                  string                 `json:"term"`
	TermBankID            int64                  `json:"termBankId"`
	Type                  FullTermWithUserType   `json:"type"`
}

func (o *FullTermWithUser) GetApprovedTermExtension() *ApprovedTermExtension {
	if o == nil {
		return nil
	}
	return o.ApprovedTermExtension
}

func (o *FullTermWithUser) GetBacklinkedTerms() []FullLinkedTerm {
	if o == nil {
		return nil
	}
	return o.BacklinkedTerms
}

func (o *FullTermWithUser) GetCaseSensitive() bool {
	if o == nil {
		return false
	}
	return o.CaseSensitive
}

func (o *FullTermWithUser) GetCreatedUser() TerminologyUser {
	if o == nil {
		return TerminologyUser{}
	}
	return o.CreatedUser
}

func (o *FullTermWithUser) GetCreationTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreationTime
}

func (o *FullTermWithUser) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *FullTermWithUser) GetExamples() []TermExample {
	if o == nil {
		return nil
	}
	return o.Examples
}

func (o *FullTermWithUser) GetHighlight() bool {
	if o == nil {
		return false
	}
	return o.Highlight
}

func (o *FullTermWithUser) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FullTermWithUser) GetLinkedTerms() []FullLinkedTerm {
	if o == nil {
		return nil
	}
	return o.LinkedTerms
}

func (o *FullTermWithUser) GetMistakes() []TermMistake {
	if o == nil {
		return nil
	}
	return o.Mistakes
}

func (o *FullTermWithUser) GetModificationTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ModificationTime
}

func (o *FullTermWithUser) GetModifiedUser() TerminologyUser {
	if o == nil {
		return TerminologyUser{}
	}
	return o.ModifiedUser
}

func (o *FullTermWithUser) GetPos() *FullTermWithUserPos {
	if o == nil {
		return nil
	}
	return o.Pos
}

func (o *FullTermWithUser) GetTags() []TermTagResponse {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *FullTermWithUser) GetTerm() string {
	if o == nil {
		return ""
	}
	return o.Term
}

func (o *FullTermWithUser) GetTermBankID() int64 {
	if o == nil {
		return 0
	}
	return o.TermBankID
}

func (o *FullTermWithUser) GetType() FullTermWithUserType {
	if o == nil {
		return FullTermWithUserType("")
	}
	return o.Type
}
