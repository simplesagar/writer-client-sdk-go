// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type FullTermWithUserPosEnum string

const (
	FullTermWithUserPosEnumNoun      FullTermWithUserPosEnum = "noun"
	FullTermWithUserPosEnumVerb      FullTermWithUserPosEnum = "verb"
	FullTermWithUserPosEnumAdverb    FullTermWithUserPosEnum = "adverb"
	FullTermWithUserPosEnumAdjective FullTermWithUserPosEnum = "adjective"
)

func (e FullTermWithUserPosEnum) ToPointer() *FullTermWithUserPosEnum {
	return &e
}

func (e *FullTermWithUserPosEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = FullTermWithUserPosEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FullTermWithUserPosEnum: %v", v)
	}
}

type FullTermWithUserTypeEnum string

const (
	FullTermWithUserTypeEnumApproved FullTermWithUserTypeEnum = "approved"
	FullTermWithUserTypeEnumBanned   FullTermWithUserTypeEnum = "banned"
	FullTermWithUserTypeEnumPending  FullTermWithUserTypeEnum = "pending"
)

func (e FullTermWithUserTypeEnum) ToPointer() *FullTermWithUserTypeEnum {
	return &e
}

func (e *FullTermWithUserTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = FullTermWithUserTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FullTermWithUserTypeEnum: %v", v)
	}
}

type FullTermWithUser struct {
	ApprovedTermExtension *ApprovedTermExtension   `json:"approvedTermExtension,omitempty"`
	BacklinkedTerms       []FullLinkedTerm         `json:"backlinkedTerms,omitempty"`
	CaseSensitive         bool                     `json:"caseSensitive"`
	CreatedUser           TerminologyUser          `json:"createdUser"`
	CreationTime          time.Time                `json:"creationTime"`
	Description           *string                  `json:"description,omitempty"`
	Examples              []TermExample            `json:"examples,omitempty"`
	Highlight             bool                     `json:"highlight"`
	ID                    int64                    `json:"id"`
	LinkedTerms           []FullLinkedTerm         `json:"linkedTerms,omitempty"`
	Mistakes              []TermMistake            `json:"mistakes,omitempty"`
	ModificationTime      time.Time                `json:"modificationTime"`
	ModifiedUser          TerminologyUser          `json:"modifiedUser"`
	Pos                   *FullTermWithUserPosEnum `json:"pos,omitempty"`
	Tags                  []TermTagResponse        `json:"tags,omitempty"`
	Term                  string                   `json:"term"`
	TermBankID            int64                    `json:"termBankId"`
	Type                  FullTermWithUserTypeEnum `json:"type"`
}
