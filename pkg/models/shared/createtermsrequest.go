// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreateTermsRequestFailHandlingEnum string

const (
	CreateTermsRequestFailHandlingEnumAccumulate   CreateTermsRequestFailHandlingEnum = "accumulate"
	CreateTermsRequestFailHandlingEnumValidate     CreateTermsRequestFailHandlingEnum = "validate"
	CreateTermsRequestFailHandlingEnumSkip         CreateTermsRequestFailHandlingEnum = "skip"
	CreateTermsRequestFailHandlingEnumValidateOnly CreateTermsRequestFailHandlingEnum = "validateOnly"
)

func (e CreateTermsRequestFailHandlingEnum) ToPointer() *CreateTermsRequestFailHandlingEnum {
	return &e
}

func (e *CreateTermsRequestFailHandlingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accumulate":
		fallthrough
	case "validate":
		fallthrough
	case "skip":
		fallthrough
	case "validateOnly":
		*e = CreateTermsRequestFailHandlingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTermsRequestFailHandlingEnum: %s", s)
	}
}

type CreateTermsRequest struct {
	FailHandling *CreateTermsRequestFailHandlingEnum `json:"failHandling,omitempty"`
	Models       []TermCreate                        `json:"models,omitempty"`
}
