// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermExampleTypeEnum string

const (
	TermExampleTypeEnumGood TermExampleTypeEnum = "good"
	TermExampleTypeEnumBad  TermExampleTypeEnum = "bad"
)

func (e TermExampleTypeEnum) ToPointer() *TermExampleTypeEnum {
	return &e
}

func (e *TermExampleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "good":
		fallthrough
	case "bad":
		*e = TermExampleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TermExampleTypeEnum: %s", s)
	}
}

type TermExample struct {
	Example    string              `json:"example"`
	ID         *int64              `json:"id,omitempty"`
	TermBankID int64               `json:"termBankId"`
	TermID     int64               `json:"termId"`
	Type       TermExampleTypeEnum `json:"type"`
}
