// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermCreatePos string

const (
	TermCreatePosNoun      TermCreatePos = "noun"
	TermCreatePosVerb      TermCreatePos = "verb"
	TermCreatePosAdverb    TermCreatePos = "adverb"
	TermCreatePosAdjective TermCreatePos = "adjective"
)

func (e TermCreatePos) ToPointer() *TermCreatePos {
	return &e
}

func (e *TermCreatePos) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = TermCreatePos(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermCreatePos: %v", v)
	}
}

type TermCreateType string

const (
	TermCreateTypeApproved TermCreateType = "approved"
	TermCreateTypeBanned   TermCreateType = "banned"
	TermCreateTypePending  TermCreateType = "pending"
)

func (e TermCreateType) ToPointer() *TermCreateType {
	return &e
}

func (e *TermCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = TermCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermCreateType: %v", v)
	}
}

type TermCreate struct {
	ApprovedTermExtension *ApprovedTermExtensionCreate `json:"approvedTermExtension,omitempty"`
	CaseSensitive         bool                         `json:"caseSensitive"`
	Description           *string                      `json:"description,omitempty"`
	Examples              []TermExampleCreate          `json:"examples,omitempty"`
	Highlight             *bool                        `json:"highlight,omitempty"`
	LinkedTerms           []LinkedTermCreate           `json:"linkedTerms,omitempty"`
	Mistakes              []TermMistakeCreate          `json:"mistakes,omitempty"`
	Pos                   *TermCreatePos               `json:"pos,omitempty"`
	Reference             *string                      `json:"reference,omitempty"`
	Tags                  []TermTagCreate              `json:"tags,omitempty"`
	Term                  string                       `json:"term"`
	Type                  TermCreateType               `json:"type"`
}

func (o *TermCreate) GetApprovedTermExtension() *ApprovedTermExtensionCreate {
	if o == nil {
		return nil
	}
	return o.ApprovedTermExtension
}

func (o *TermCreate) GetCaseSensitive() bool {
	if o == nil {
		return false
	}
	return o.CaseSensitive
}

func (o *TermCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TermCreate) GetExamples() []TermExampleCreate {
	if o == nil {
		return nil
	}
	return o.Examples
}

func (o *TermCreate) GetHighlight() *bool {
	if o == nil {
		return nil
	}
	return o.Highlight
}

func (o *TermCreate) GetLinkedTerms() []LinkedTermCreate {
	if o == nil {
		return nil
	}
	return o.LinkedTerms
}

func (o *TermCreate) GetMistakes() []TermMistakeCreate {
	if o == nil {
		return nil
	}
	return o.Mistakes
}

func (o *TermCreate) GetPos() *TermCreatePos {
	if o == nil {
		return nil
	}
	return o.Pos
}

func (o *TermCreate) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *TermCreate) GetTags() []TermTagCreate {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *TermCreate) GetTerm() string {
	if o == nil {
		return ""
	}
	return o.Term
}

func (o *TermCreate) GetType() TermCreateType {
	if o == nil {
		return TermCreateType("")
	}
	return o.Type
}
