// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BriefDocumentAccess string

const (
	BriefDocumentAccessPrivate BriefDocumentAccess = "private"
	BriefDocumentAccessPublic  BriefDocumentAccess = "public"
	BriefDocumentAccessShared  BriefDocumentAccess = "shared"
)

func (e BriefDocumentAccess) ToPointer() *BriefDocumentAccess {
	return &e
}

func (e *BriefDocumentAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "shared":
		*e = BriefDocumentAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BriefDocumentAccess: %v", v)
	}
}

type BriefDocument struct {
	Access           BriefDocumentAccess `json:"access"`
	CreatedUser      *SimpleUser         `json:"createdUser,omitempty"`
	CreationTime     time.Time           `json:"creationTime"`
	ID               int64               `json:"id"`
	ModificationTime time.Time           `json:"modificationTime"`
	ModifiedUser     *SimpleUser         `json:"modifiedUser,omitempty"`
	OrganizationID   int64               `json:"organizationId"`
	Score            int64               `json:"score"`
	TeamID           int64               `json:"teamId"`
	Title            string              `json:"title"`
}
