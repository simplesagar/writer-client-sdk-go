// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermMistakeCreatePos string

const (
	TermMistakeCreatePosNoun      TermMistakeCreatePos = "noun"
	TermMistakeCreatePosVerb      TermMistakeCreatePos = "verb"
	TermMistakeCreatePosAdverb    TermMistakeCreatePos = "adverb"
	TermMistakeCreatePosAdjective TermMistakeCreatePos = "adjective"
)

func (e TermMistakeCreatePos) ToPointer() *TermMistakeCreatePos {
	return &e
}

func (e *TermMistakeCreatePos) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = TermMistakeCreatePos(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermMistakeCreatePos: %v", v)
	}
}

type TermMistakeCreate struct {
	CaseSensitive bool                  `json:"caseSensitive"`
	Mistake       string                `json:"mistake"`
	Pos           *TermMistakeCreatePos `json:"pos,omitempty"`
	Reference     *string               `json:"reference,omitempty"`
}
