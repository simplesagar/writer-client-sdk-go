// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermMistakeCreatePosEnum string

const (
	TermMistakeCreatePosEnumNoun      TermMistakeCreatePosEnum = "noun"
	TermMistakeCreatePosEnumVerb      TermMistakeCreatePosEnum = "verb"
	TermMistakeCreatePosEnumAdverb    TermMistakeCreatePosEnum = "adverb"
	TermMistakeCreatePosEnumAdjective TermMistakeCreatePosEnum = "adjective"
)

func (e *TermMistakeCreatePosEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = TermMistakeCreatePosEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TermMistakeCreatePosEnum: %s", s)
	}
}

type TermMistakeCreate struct {
	CaseSensitive bool                      `json:"caseSensitive"`
	Mistake       string                    `json:"mistake"`
	Pos           *TermMistakeCreatePosEnum `json:"pos,omitempty"`
	Reference     *string                   `json:"reference,omitempty"`
}
