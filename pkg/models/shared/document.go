// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type DocumentAccess string

const (
	DocumentAccessPrivate DocumentAccess = "private"
	DocumentAccessPublic  DocumentAccess = "public"
	DocumentAccessShared  DocumentAccess = "shared"
)

func (e DocumentAccess) ToPointer() *DocumentAccess {
	return &e
}

func (e *DocumentAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "shared":
		*e = DocumentAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentAccess: %v", v)
	}
}

type Document struct {
	Access           DocumentAccess `json:"access"`
	Content          string         `json:"content"`
	CreatedUser      *SimpleUser    `json:"createdUser,omitempty"`
	CreationTime     time.Time      `json:"creationTime"`
	ID               int64          `json:"id"`
	ModificationTime time.Time      `json:"modificationTime"`
	ModifiedUser     *SimpleUser    `json:"modifiedUser,omitempty"`
	OrganizationID   int64          `json:"organizationId"`
	Score            int64          `json:"score"`
	TeamID           int64          `json:"teamId"`
	Title            string         `json:"title"`
}
