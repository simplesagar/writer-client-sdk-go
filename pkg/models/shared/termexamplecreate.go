// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermExampleCreateType string

const (
	TermExampleCreateTypeGood TermExampleCreateType = "good"
	TermExampleCreateTypeBad  TermExampleCreateType = "bad"
)

func (e TermExampleCreateType) ToPointer() *TermExampleCreateType {
	return &e
}

func (e *TermExampleCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "good":
		fallthrough
	case "bad":
		*e = TermExampleCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermExampleCreateType: %v", v)
	}
}

type TermExampleCreate struct {
	Example string                `json:"example"`
	Type    TermExampleCreateType `json:"type"`
}

func (o *TermExampleCreate) GetExample() string {
	if o == nil {
		return ""
	}
	return o.Example
}

func (o *TermExampleCreate) GetType() TermExampleCreateType {
	if o == nil {
		return TermExampleCreateType("")
	}
	return o.Type
}
