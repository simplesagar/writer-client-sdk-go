// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetaDataTierEnum string

const (
	MetaDataTierEnumEnterprise1 MetaDataTierEnum = "enterprise-1"
	MetaDataTierEnumEnterprise2 MetaDataTierEnum = "enterprise-2"
	MetaDataTierEnumEnterprise3 MetaDataTierEnum = "enterprise-3"
	MetaDataTierEnumEnterprise4 MetaDataTierEnum = "enterprise-4"
)

func (e MetaDataTierEnum) ToPointer() *MetaDataTierEnum {
	return &e
}

func (e *MetaDataTierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enterprise-1":
		fallthrough
	case "enterprise-2":
		fallthrough
	case "enterprise-3":
		fallthrough
	case "enterprise-4":
		*e = MetaDataTierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MetaDataTierEnum: %s", s)
	}
}

type MetaData struct {
	Portal        map[string]string `json:"portal"`
	Reporting     map[string]string `json:"reporting"`
	SnippetsCount int64             `json:"snippetsCount"`
	SsoAccess     bool              `json:"ssoAccess"`
	Styleguide    map[string]string `json:"styleguide"`
	TeamCount     int64             `json:"teamCount"`
	TermsCount    int64             `json:"termsCount"`
	Tier          *MetaDataTierEnum `json:"tier,omitempty"`
}
