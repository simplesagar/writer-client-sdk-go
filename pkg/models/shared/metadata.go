// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetaDataTier string

const (
	MetaDataTierEnterprise1 MetaDataTier = "enterprise-1"
	MetaDataTierEnterprise2 MetaDataTier = "enterprise-2"
	MetaDataTierEnterprise3 MetaDataTier = "enterprise-3"
	MetaDataTierEnterprise4 MetaDataTier = "enterprise-4"
)

func (e MetaDataTier) ToPointer() *MetaDataTier {
	return &e
}

func (e *MetaDataTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise-1":
		fallthrough
	case "enterprise-2":
		fallthrough
	case "enterprise-3":
		fallthrough
	case "enterprise-4":
		*e = MetaDataTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetaDataTier: %v", v)
	}
}

type MetaData struct {
	Portal        map[string]string `json:"portal"`
	Reporting     map[string]string `json:"reporting"`
	SnippetsCount int64             `json:"snippetsCount"`
	SsoAccess     bool              `json:"ssoAccess"`
	Styleguide    map[string]string `json:"styleguide"`
	TeamCount     int64             `json:"teamCount"`
	TermsCount    int64             `json:"termsCount"`
	Tier          *MetaDataTier     `json:"tier,omitempty"`
}
