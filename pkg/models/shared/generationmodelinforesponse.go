// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GenerationModelInfoResponseType string

const (
	GenerationModelInfoResponseTypeGpt      GenerationModelInfoResponseType = "GPT"
	GenerationModelInfoResponseTypeInstruct GenerationModelInfoResponseType = "Instruct"
)

func (e GenerationModelInfoResponseType) ToPointer() *GenerationModelInfoResponseType {
	return &e
}

func (e *GenerationModelInfoResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GPT":
		fallthrough
	case "Instruct":
		*e = GenerationModelInfoResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GenerationModelInfoResponseType: %v", v)
	}
}

type GenerationModelInfoResponse struct {
	ID   string                          `json:"id"`
	Name string                          `json:"name"`
	Type GenerationModelInfoResponseType `json:"type"`
}

func (o *GenerationModelInfoResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GenerationModelInfoResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GenerationModelInfoResponse) GetType() GenerationModelInfoResponseType {
	if o == nil {
		return GenerationModelInfoResponseType("")
	}
	return o.Type
}
