// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UpdateTermsRequestFailHandlingEnum string

const (
	UpdateTermsRequestFailHandlingEnumAccumulate   UpdateTermsRequestFailHandlingEnum = "accumulate"
	UpdateTermsRequestFailHandlingEnumValidate     UpdateTermsRequestFailHandlingEnum = "validate"
	UpdateTermsRequestFailHandlingEnumSkip         UpdateTermsRequestFailHandlingEnum = "skip"
	UpdateTermsRequestFailHandlingEnumValidateOnly UpdateTermsRequestFailHandlingEnum = "validateOnly"
)

func (e UpdateTermsRequestFailHandlingEnum) ToPointer() *UpdateTermsRequestFailHandlingEnum {
	return &e
}

func (e *UpdateTermsRequestFailHandlingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accumulate":
		fallthrough
	case "validate":
		fallthrough
	case "skip":
		fallthrough
	case "validateOnly":
		*e = UpdateTermsRequestFailHandlingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTermsRequestFailHandlingEnum: %s", s)
	}
}

type UpdateTermsRequest struct {
	FailHandling *UpdateTermsRequestFailHandlingEnum `json:"failHandling,omitempty"`
	Models       []TermUpdate                        `json:"models,omitempty"`
}
