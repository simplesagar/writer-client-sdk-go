// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FullLinkedTermPosEnum string

const (
	FullLinkedTermPosEnumNoun      FullLinkedTermPosEnum = "noun"
	FullLinkedTermPosEnumVerb      FullLinkedTermPosEnum = "verb"
	FullLinkedTermPosEnumAdverb    FullLinkedTermPosEnum = "adverb"
	FullLinkedTermPosEnumAdjective FullLinkedTermPosEnum = "adjective"
)

func (e FullLinkedTermPosEnum) ToPointer() *FullLinkedTermPosEnum {
	return &e
}

func (e *FullLinkedTermPosEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = FullLinkedTermPosEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullLinkedTermPosEnum: %s", s)
	}
}

type FullLinkedTerm struct {
	ApprovedTermExtension *ApprovedTermExtension `json:"approvedTermExtension,omitempty"`
	CaseSensitive         bool                   `json:"caseSensitive"`
	ID                    *int64                 `json:"id,omitempty"`
	LinkedTermID          int64                  `json:"linkedTermId"`
	Pos                   *FullLinkedTermPosEnum `json:"pos,omitempty"`
	Term                  string                 `json:"term"`
	TermID                int64                  `json:"termId"`
}
