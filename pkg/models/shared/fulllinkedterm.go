// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Pos string

const (
	PosNoun      Pos = "noun"
	PosVerb      Pos = "verb"
	PosAdverb    Pos = "adverb"
	PosAdjective Pos = "adjective"
)

func (e Pos) ToPointer() *Pos {
	return &e
}

func (e *Pos) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = Pos(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pos: %v", v)
	}
}

type FullLinkedTerm struct {
	ApprovedTermExtension *ApprovedTermExtension `json:"approvedTermExtension,omitempty"`
	CaseSensitive         bool                   `json:"caseSensitive"`
	ID                    *int64                 `json:"id,omitempty"`
	LinkedTermID          int64                  `json:"linkedTermId"`
	Pos                   *Pos                   `json:"pos,omitempty"`
	Term                  string                 `json:"term"`
	TermID                int64                  `json:"termId"`
}

func (o *FullLinkedTerm) GetApprovedTermExtension() *ApprovedTermExtension {
	if o == nil {
		return nil
	}
	return o.ApprovedTermExtension
}

func (o *FullLinkedTerm) GetCaseSensitive() bool {
	if o == nil {
		return false
	}
	return o.CaseSensitive
}

func (o *FullLinkedTerm) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FullLinkedTerm) GetLinkedTermID() int64 {
	if o == nil {
		return 0
	}
	return o.LinkedTermID
}

func (o *FullLinkedTerm) GetPos() *Pos {
	if o == nil {
		return nil
	}
	return o.Pos
}

func (o *FullLinkedTerm) GetTerm() string {
	if o == nil {
		return ""
	}
	return o.Term
}

func (o *FullLinkedTerm) GetTermID() int64 {
	if o == nil {
		return 0
	}
	return o.TermID
}
