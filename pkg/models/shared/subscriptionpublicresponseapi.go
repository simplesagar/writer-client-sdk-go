// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/writerai/writer-client-sdk-go/pkg/utils"
	"time"
)

type ProductName string

const (
	ProductNameFree       ProductName = "free"
	ProductNamePro        ProductName = "pro"
	ProductNameTeam       ProductName = "team"
	ProductNameEnterprise ProductName = "enterprise"
	ProductNameLegacy     ProductName = "legacy"
)

func (e ProductName) ToPointer() *ProductName {
	return &e
}

func (e *ProductName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		fallthrough
	case "pro":
		fallthrough
	case "team":
		fallthrough
	case "enterprise":
		fallthrough
	case "legacy":
		*e = ProductName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductName: %v", v)
	}
}

type SubscriptionPublicResponseAPIStatus string

const (
	SubscriptionPublicResponseAPIStatusTrialing          SubscriptionPublicResponseAPIStatus = "trialing"
	SubscriptionPublicResponseAPIStatusActive            SubscriptionPublicResponseAPIStatus = "active"
	SubscriptionPublicResponseAPIStatusPastDue           SubscriptionPublicResponseAPIStatus = "past_due"
	SubscriptionPublicResponseAPIStatusIncomplete        SubscriptionPublicResponseAPIStatus = "incomplete"
	SubscriptionPublicResponseAPIStatusIncompleteExpired SubscriptionPublicResponseAPIStatus = "incomplete_expired"
	SubscriptionPublicResponseAPIStatusUnpaid            SubscriptionPublicResponseAPIStatus = "unpaid"
	SubscriptionPublicResponseAPIStatusCanceled          SubscriptionPublicResponseAPIStatus = "canceled"
)

func (e SubscriptionPublicResponseAPIStatus) ToPointer() *SubscriptionPublicResponseAPIStatus {
	return &e
}

func (e *SubscriptionPublicResponseAPIStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trialing":
		fallthrough
	case "active":
		fallthrough
	case "past_due":
		fallthrough
	case "incomplete":
		fallthrough
	case "incomplete_expired":
		fallthrough
	case "unpaid":
		fallthrough
	case "canceled":
		*e = SubscriptionPublicResponseAPIStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionPublicResponseAPIStatus: %v", v)
	}
}

type SubscriptionPublicResponseAPI struct {
	CreatedAt      time.Time                           `json:"createdAt"`
	Meta           MetaData                            `json:"meta"`
	ProductName    ProductName                         `json:"productName"`
	Seats          int64                               `json:"seats"`
	Status         SubscriptionPublicResponseAPIStatus `json:"status"`
	SubscriptionID string                              `json:"subscriptionId"`
	Usage          Usage                               `json:"usage"`
}

func (s SubscriptionPublicResponseAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubscriptionPublicResponseAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubscriptionPublicResponseAPI) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SubscriptionPublicResponseAPI) GetMeta() MetaData {
	if o == nil {
		return MetaData{}
	}
	return o.Meta
}

func (o *SubscriptionPublicResponseAPI) GetProductName() ProductName {
	if o == nil {
		return ProductName("")
	}
	return o.ProductName
}

func (o *SubscriptionPublicResponseAPI) GetSeats() int64 {
	if o == nil {
		return 0
	}
	return o.Seats
}

func (o *SubscriptionPublicResponseAPI) GetStatus() SubscriptionPublicResponseAPIStatus {
	if o == nil {
		return SubscriptionPublicResponseAPIStatus("")
	}
	return o.Status
}

func (o *SubscriptionPublicResponseAPI) GetSubscriptionID() string {
	if o == nil {
		return ""
	}
	return o.SubscriptionID
}

func (o *SubscriptionPublicResponseAPI) GetUsage() Usage {
	if o == nil {
		return Usage{}
	}
	return o.Usage
}
