// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermUpdatePos string

const (
	TermUpdatePosNoun      TermUpdatePos = "noun"
	TermUpdatePosVerb      TermUpdatePos = "verb"
	TermUpdatePosAdverb    TermUpdatePos = "adverb"
	TermUpdatePosAdjective TermUpdatePos = "adjective"
)

func (e TermUpdatePos) ToPointer() *TermUpdatePos {
	return &e
}

func (e *TermUpdatePos) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = TermUpdatePos(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermUpdatePos: %v", v)
	}
}

type TermUpdateType string

const (
	TermUpdateTypeApproved TermUpdateType = "approved"
	TermUpdateTypeBanned   TermUpdateType = "banned"
	TermUpdateTypePending  TermUpdateType = "pending"
)

func (e TermUpdateType) ToPointer() *TermUpdateType {
	return &e
}

func (e *TermUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = TermUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TermUpdateType: %v", v)
	}
}

type TermUpdate struct {
	ApprovedTermExtension *ApprovedTermExtensionCreate `json:"approvedTermExtension,omitempty"`
	CaseSensitive         bool                         `json:"caseSensitive"`
	Description           *string                      `json:"description,omitempty"`
	Examples              []TermExampleCreate          `json:"examples,omitempty"`
	Highlight             *bool                        `json:"highlight,omitempty"`
	ID                    int64                        `json:"id"`
	LinkedTerms           []LinkedTermCreate           `json:"linkedTerms,omitempty"`
	Mistakes              []TermMistakeCreate          `json:"mistakes,omitempty"`
	Pos                   *TermUpdatePos               `json:"pos,omitempty"`
	Tags                  []TermTagCreate              `json:"tags,omitempty"`
	Term                  string                       `json:"term"`
	Type                  TermUpdateType               `json:"type"`
}

func (o *TermUpdate) GetApprovedTermExtension() *ApprovedTermExtensionCreate {
	if o == nil {
		return nil
	}
	return o.ApprovedTermExtension
}

func (o *TermUpdate) GetCaseSensitive() bool {
	if o == nil {
		return false
	}
	return o.CaseSensitive
}

func (o *TermUpdate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TermUpdate) GetExamples() []TermExampleCreate {
	if o == nil {
		return nil
	}
	return o.Examples
}

func (o *TermUpdate) GetHighlight() *bool {
	if o == nil {
		return nil
	}
	return o.Highlight
}

func (o *TermUpdate) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TermUpdate) GetLinkedTerms() []LinkedTermCreate {
	if o == nil {
		return nil
	}
	return o.LinkedTerms
}

func (o *TermUpdate) GetMistakes() []TermMistakeCreate {
	if o == nil {
		return nil
	}
	return o.Mistakes
}

func (o *TermUpdate) GetPos() *TermUpdatePos {
	if o == nil {
		return nil
	}
	return o.Pos
}

func (o *TermUpdate) GetTags() []TermTagCreate {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *TermUpdate) GetTerm() string {
	if o == nil {
		return ""
	}
	return o.Term
}

func (o *TermUpdate) GetType() TermUpdateType {
	if o == nil {
		return TermUpdateType("")
	}
	return o.Type
}
