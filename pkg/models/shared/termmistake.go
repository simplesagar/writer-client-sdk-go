// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TermMistakePosEnum string

const (
	TermMistakePosEnumNoun      TermMistakePosEnum = "noun"
	TermMistakePosEnumVerb      TermMistakePosEnum = "verb"
	TermMistakePosEnumAdverb    TermMistakePosEnum = "adverb"
	TermMistakePosEnumAdjective TermMistakePosEnum = "adjective"
)

func (e *TermMistakePosEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = TermMistakePosEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TermMistakePosEnum: %s", s)
	}
}

type TermMistake struct {
	CaseSensitive bool                `json:"caseSensitive"`
	ID            *int64              `json:"id,omitempty"`
	Mistake       string              `json:"mistake"`
	Pos           *TermMistakePosEnum `json:"pos,omitempty"`
	TermBankID    int64               `json:"termBankId"`
	TermID        int64               `json:"termId"`
}
