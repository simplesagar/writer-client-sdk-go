// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContentIssueService string

const (
	ContentIssueServiceCommonMistakes     ContentIssueService = "common-mistakes"
	ContentIssueServiceBannedWords        ContentIssueService = "banned-words"
	ContentIssueServiceDictionary         ContentIssueService = "dictionary"
	ContentIssueServiceGec                ContentIssueService = "gec"
	ContentIssueServiceInfinitive         ContentIssueService = "infinitive"
	ContentIssueServiceSpelling           ContentIssueService = "spelling"
	ContentIssueServiceWritingStyle       ContentIssueService = "writing-style"
	ContentIssueServiceCustomRules        ContentIssueService = "custom-rules"
	ContentIssueServiceSentenceCase       ContentIssueService = "sentence-case"
	ContentIssueServiceAcronym            ContentIssueService = "acronym"
	ContentIssueServiceOxfordComma        ContentIssueService = "oxford-comma"
	ContentIssueServiceMlPunctuation      ContentIssueService = "ml-punctuation"
	ContentIssueServiceEmojis             ContentIssueService = "emojis"
	ContentIssueServiceGenderPronouns     ContentIssueService = "gender-pronouns"
	ContentIssueServiceSensitivity        ContentIssueService = "sensitivity"
	ContentIssueServicePlagiarism         ContentIssueService = "plagiarism"
	ContentIssueServiceReadability        ContentIssueService = "readability"
	ContentIssueServiceSentenceComplexity ContentIssueService = "sentence-complexity"
	ContentIssueServiceVocabulary         ContentIssueService = "vocabulary"
	ContentIssueServiceParagraphLength    ContentIssueService = "paragraph-length"
	ContentIssueServicePlainLanguage      ContentIssueService = "plain-language"
	ContentIssueServiceHealthyCommn       ContentIssueService = "healthy-commn"
	ContentIssueServiceConfidence         ContentIssueService = "confidence"
	ContentIssueServiceDataLossPrevention ContentIssueService = "data-loss-prevention"
	ContentIssueServiceHateSpeech         ContentIssueService = "hate-speech"
	ContentIssueServiceContentSafeguards  ContentIssueService = "content-safeguards"
	ContentIssueServiceFeedback           ContentIssueService = "feedback"
	ContentIssueServiceClaim              ContentIssueService = "claim"
	ContentIssueServiceQuote              ContentIssueService = "quote"
	ContentIssueServiceGenderNouns        ContentIssueService = "gender-nouns"
	ContentIssueServiceGenderTone         ContentIssueService = "gender-tone"
	ContentIssueServiceGrammar            ContentIssueService = "grammar"
	ContentIssueServicePunctuationDark    ContentIssueService = "punctuation-dark"
	ContentIssueServiceFormatting         ContentIssueService = "formatting"
	ContentIssueServiceTwitter            ContentIssueService = "twitter"
	ContentIssueServiceGecDark            ContentIssueService = "gec-dark"
	ContentIssueServiceGecGpt3            ContentIssueService = "gec-gpt3"
)

func (e ContentIssueService) ToPointer() *ContentIssueService {
	return &e
}

func (e *ContentIssueService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "common-mistakes":
		fallthrough
	case "banned-words":
		fallthrough
	case "dictionary":
		fallthrough
	case "gec":
		fallthrough
	case "infinitive":
		fallthrough
	case "spelling":
		fallthrough
	case "writing-style":
		fallthrough
	case "custom-rules":
		fallthrough
	case "sentence-case":
		fallthrough
	case "acronym":
		fallthrough
	case "oxford-comma":
		fallthrough
	case "ml-punctuation":
		fallthrough
	case "emojis":
		fallthrough
	case "gender-pronouns":
		fallthrough
	case "sensitivity":
		fallthrough
	case "plagiarism":
		fallthrough
	case "readability":
		fallthrough
	case "sentence-complexity":
		fallthrough
	case "vocabulary":
		fallthrough
	case "paragraph-length":
		fallthrough
	case "plain-language":
		fallthrough
	case "healthy-commn":
		fallthrough
	case "confidence":
		fallthrough
	case "data-loss-prevention":
		fallthrough
	case "hate-speech":
		fallthrough
	case "content-safeguards":
		fallthrough
	case "feedback":
		fallthrough
	case "claim":
		fallthrough
	case "quote":
		fallthrough
	case "gender-nouns":
		fallthrough
	case "gender-tone":
		fallthrough
	case "grammar":
		fallthrough
	case "punctuation-dark":
		fallthrough
	case "formatting":
		fallthrough
	case "twitter":
		fallthrough
	case "gec-dark":
		fallthrough
	case "gec-gpt3":
		*e = ContentIssueService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentIssueService: %v", v)
	}
}

type ContentIssue struct {
	Description *string             `json:"description,omitempty"`
	From        int64               `json:"from"`
	Meta        interface{}         `json:"meta,omitempty"`
	Service     ContentIssueService `json:"service"`
	Suggestions []string            `json:"suggestions,omitempty"`
	Until       int64               `json:"until"`
}
